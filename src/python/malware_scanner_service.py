import os
import time
import servicemanager
import win32serviceutil
import win32service
import win32event
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler

class MalwareScannerHandler(FileSystemEventHandler):
    def __init__(self, signatures, keywords):
        self.signatures = signatures
        self.keywords = keywords

    def on_created(self, event):
        if not event.is_directory:
            self.scan_file(event.src_path)

    def on_modified(self, event):
        if not event.is_directory:
            self.scan_file(event.src_path)

    def scan_file(self, file_path):
        try:
            with open(file_path, 'r', errors='ignore') as file:
                content = file.read()
                if any(sig in content for sig in self.signatures) or any(kw in content for kw in self.keywords):
                    print(f"Potentially malicious file detected: {file_path}")
        except Exception as e:
            print(f"Error reading file {file_path}: {e}")

class MalwareScannerService(win32serviceutil.ServiceFramework):
    _svc_name_ = "MalwareScannerService"
    _svc_display_name_ = "Malware Scanner Service"
    _svc_description_ = "Scans downloaded files for malware."

    def __init__(self, args):
        win32serviceutil.ServiceFramework.__init__(self, args)
        self.hWaitStop = win32event.CreateEvent(None, 0, 0, None)
        self.observer = Observer()
        self.path_to_watch = "C:\\Users\\YourUsername\\Downloads"  # Update this path as needed

    def SvcStop(self):
        self.ReportServiceStatus(win32service.SERVICE_STOP_PENDING)
        win32event.SetEvent(self.hWaitStop)
        self.observer.stop()
        self.observer.join()
        self.ReportServiceStatus(win32service.SERVICE_STOPPED)

    def SvcDoRun(self):
        self.ReportServiceStatus(win32service.SERVICE_RUNNING)
        self.run()

    def run(self):
        signatures = self.load_signatures("signatures.txt")
        keywords = self.load_signatures("keywords.txt")
        event_handler = MalwareScannerHandler(signatures, keywords)
        self.observer.schedule(event_handler, self.path_to_watch, recursive=True)
        self.observer.start()
        while True:
            if win32event.WaitForSingleObject(self.hWaitStop, 5000) == win32event.WAIT_OBJECT_0:
                break

    def load_signatures(self, filename):
        with open(filename, 'r') as file:
            return [line.strip() for line in file]

if __name__ == '__main__':
    win32serviceutil.HandleCommandLine(MalwareScannerService)
