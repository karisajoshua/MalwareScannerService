using System;
using System.Collections.Generic;
using System.IO;
using System.ServiceProcess;
using System.Threading;
using System.Linq;

public class MalwareScannerService : ServiceBase
{
    private FileSystemWatcher _fileSystemWatcher;
    private readonly string _pathToWatch = @"C:\Users\YourUsername\Downloads"; // Update this path as needed
    private readonly List<string> _signatures = LoadSignatures("signatures.txt");
    private readonly List<string> _keywords = LoadSignatures("keywords.txt");

    public MalwareScannerService()
    {
        this.ServiceName = "MalwareScannerService";
    }

    protected override void OnStart(string[] args)
    {
        try
        {
            _fileSystemWatcher = new FileSystemWatcher
            {
                Path = _pathToWatch,
                NotifyFilter = NotifyFilters.LastWrite | NotifyFilters.FileName | NotifyFilters.DirectoryName,
                Filter = "*.*"
            };

            _fileSystemWatcher.Created += OnChanged;
            _fileSystemWatcher.Changed += OnChanged;
            _fileSystemWatcher.EnableRaisingEvents = true;
        }
        catch (Exception ex)
        {
            EventLog.WriteEntry($"Error starting service: {ex.Message}", EventLogEntryType.Error);
        }
    }

    protected override void OnStop()
    {
        _fileSystemWatcher.EnableRaisingEvents = false;
        _fileSystemWatcher.Dispose();
    }

    private void OnChanged(object source, FileSystemEventArgs e)
    {
        ScanFile(e.FullPath);
    }

    private void ScanFile(string filePath)
    {
        try
        {
            var content = File.ReadAllText(filePath);
            if (_signatures.Any(sig => content.Contains(sig)) || _keywords.Any(kw => content.Contains(kw)))
            {
                EventLog.WriteEntry($"Potentially malicious file detected: {filePath}", EventLogEntryType.Warning);
            }
        }
        catch (Exception ex)
        {
            EventLog.WriteEntry($"Error reading file {filePath}: {ex.Message}", EventLogEntryType.Error);
        }
    }

    private static List<string> LoadSignatures(string filename)
    {
        try
        {
            return File.ReadAllLines(filename).Select(line => line.Trim()).Where(line => !string.IsNullOrEmpty(line)).ToList();
        }
        catch (Exception ex)
        {
            // Log error or handle exception
            Console.WriteLine($"Error loading signatures: {ex.Message}");
            return new List<string>();
        }
    }

    public static void Main()
    {
        ServiceBase.Run(new MalwareScannerService());
    }
}
